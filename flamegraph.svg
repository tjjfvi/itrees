<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="4190"><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="0.0000%" y="501" width="0.0239%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>itrees`DYLD-STUB$$free (30 samples, 0.72%)</title><rect x="0.0239%" y="485" width="0.7160%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="30"/><text x="0.2739%" y="495.50"></text></g><g><title>itrees`__rdl_dealloc (3 samples, 0.07%)</title><rect x="0.7399%" y="485" width="0.0716%" height="15" fill="rgb(221,193,54)" fg:x="31" fg:w="3"/><text x="0.9899%" y="495.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect x="0.8115%" y="485" width="0.0477%" height="15" fill="rgb(248,212,6)" fg:x="34" fg:w="2"/><text x="1.0615%" y="495.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="0.8353%" y="469" width="0.0239%" height="15" fill="rgb(208,68,35)" fg:x="35" fg:w="1"/><text x="1.0853%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.8353%" y="453" width="0.0239%" height="15" fill="rgb(232,128,0)" fg:x="35" fg:w="1"/><text x="1.0853%" y="463.50"></text></g><g><title>itrees`itrees::Net::annihilate (16 samples, 0.38%)</title><rect x="0.8592%" y="485" width="0.3819%" height="15" fill="rgb(207,160,47)" fg:x="36" fg:w="16"/><text x="1.1092%" y="495.50"></text></g><g><title>itrees`itrees::Net::commute (3 samples, 0.07%)</title><rect x="1.2411%" y="485" width="0.0716%" height="15" fill="rgb(228,23,34)" fg:x="52" fg:w="3"/><text x="1.4911%" y="495.50"></text></g><g><title>itrees`DYLD-STUB$$free (6 samples, 0.14%)</title><rect x="2.9356%" y="469" width="0.1432%" height="15" fill="rgb(218,30,26)" fg:x="123" fg:w="6"/><text x="3.1856%" y="479.50"></text></g><g><title>itrees`itrees::tree::OwnedTree::take (10 samples, 0.24%)</title><rect x="20.3103%" y="453" width="0.2387%" height="15" fill="rgb(220,122,19)" fg:x="851" fg:w="10"/><text x="20.5603%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="20.5251%" y="437" width="0.0239%" height="15" fill="rgb(250,228,42)" fg:x="860" fg:w="1"/><text x="20.7751%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="20.5251%" y="421" width="0.0239%" height="15" fill="rgb(240,193,28)" fg:x="860" fg:w="1"/><text x="20.7751%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="20.5251%" y="405" width="0.0239%" height="15" fill="rgb(216,20,37)" fg:x="860" fg:w="1"/><text x="20.7751%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (15 samples, 0.36%)</title><rect x="20.5489%" y="453" width="0.3580%" height="15" fill="rgb(206,188,39)" fg:x="861" fg:w="15"/><text x="20.7989%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (3 samples, 0.07%)</title><rect x="20.9069%" y="453" width="0.0716%" height="15" fill="rgb(217,207,13)" fg:x="876" fg:w="3"/><text x="21.1569%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.10%)</title><rect x="20.9785%" y="453" width="0.0955%" height="15" fill="rgb(231,73,38)" fg:x="879" fg:w="4"/><text x="21.2285%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (188 samples, 4.49%)</title><rect x="21.0740%" y="453" width="4.4869%" height="15" fill="rgb(225,20,46)" fg:x="883" fg:w="188"/><text x="21.3240%" y="463.50">libsy..</text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="25.7041%" y="437" width="0.0239%" height="15" fill="rgb(210,31,41)" fg:x="1077" fg:w="1"/><text x="25.9541%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.17%)</title><rect x="26.2530%" y="421" width="0.1671%" height="15" fill="rgb(221,200,47)" fg:x="1100" fg:w="7"/><text x="26.5030%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (37 samples, 0.88%)</title><rect x="25.5609%" y="453" width="0.8831%" height="15" fill="rgb(226,26,5)" fg:x="1071" fg:w="37"/><text x="25.8109%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (30 samples, 0.72%)</title><rect x="25.7279%" y="437" width="0.7160%" height="15" fill="rgb(249,33,26)" fg:x="1078" fg:w="30"/><text x="25.9779%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="26.4200%" y="421" width="0.0239%" height="15" fill="rgb(235,183,28)" fg:x="1107" fg:w="1"/><text x="26.6700%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.10%)</title><rect x="26.4439%" y="453" width="0.0955%" height="15" fill="rgb(221,5,38)" fg:x="1108" fg:w="4"/><text x="26.6939%" y="463.50"></text></g><g><title>itrees`itrees::Net::annihilate (1,018 samples, 24.30%)</title><rect x="3.0788%" y="469" width="24.2959%" height="15" fill="rgb(247,18,42)" fg:x="129" fg:w="1018"/><text x="3.3288%" y="479.50">itrees`itrees::Net::annihilate</text></g><g><title>libsystem_platform.dylib`_platform_memset (35 samples, 0.84%)</title><rect x="26.5394%" y="453" width="0.8353%" height="15" fill="rgb(241,131,45)" fg:x="1112" fg:w="35"/><text x="26.7894%" y="463.50"></text></g><g><title>itrees`DYLD-STUB$$malloc (23 samples, 0.55%)</title><rect x="38.5680%" y="453" width="0.5489%" height="15" fill="rgb(249,31,29)" fg:x="1616" fg:w="23"/><text x="38.8180%" y="463.50"></text></g><g><title>itrees`DYLD-STUB$$memcpy (23 samples, 0.55%)</title><rect x="39.1169%" y="453" width="0.5489%" height="15" fill="rgb(225,111,53)" fg:x="1639" fg:w="23"/><text x="39.3669%" y="463.50"></text></g><g><title>itrees`__rdl_alloc (60 samples, 1.43%)</title><rect x="39.6659%" y="453" width="1.4320%" height="15" fill="rgb(238,160,17)" fg:x="1662" fg:w="60"/><text x="39.9159%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="41.1456%" y="389" width="0.0239%" height="15" fill="rgb(214,148,48)" fg:x="1724" fg:w="1"/><text x="41.3956%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.05%)</title><rect x="41.1695%" y="389" width="0.0477%" height="15" fill="rgb(232,36,49)" fg:x="1725" fg:w="2"/><text x="41.4195%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="41.1933%" y="373" width="0.0239%" height="15" fill="rgb(209,103,24)" fg:x="1726" fg:w="1"/><text x="41.4433%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="41.2172%" y="357" width="0.0239%" height="15" fill="rgb(229,88,8)" fg:x="1727" fg:w="1"/><text x="41.4672%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.07%)</title><rect x="41.2172%" y="373" width="0.0716%" height="15" fill="rgb(213,181,19)" fg:x="1727" fg:w="3"/><text x="41.4672%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.05%)</title><rect x="41.2411%" y="357" width="0.0477%" height="15" fill="rgb(254,191,54)" fg:x="1728" fg:w="2"/><text x="41.4911%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="41.2649%" y="341" width="0.0239%" height="15" fill="rgb(241,83,37)" fg:x="1729" fg:w="1"/><text x="41.5149%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.12%)</title><rect x="41.2172%" y="389" width="0.1193%" height="15" fill="rgb(233,36,39)" fg:x="1727" fg:w="5"/><text x="41.4672%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="41.2888%" y="373" width="0.0477%" height="15" fill="rgb(226,3,54)" fg:x="1730" fg:w="2"/><text x="41.5388%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.02%)</title><rect x="41.3126%" y="357" width="0.0239%" height="15" fill="rgb(245,192,40)" fg:x="1731" fg:w="1"/><text x="41.5626%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (11 samples, 0.26%)</title><rect x="41.1456%" y="405" width="0.2625%" height="15" fill="rgb(238,167,29)" fg:x="1724" fg:w="11"/><text x="41.3956%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="41.3365%" y="389" width="0.0716%" height="15" fill="rgb(232,182,51)" fg:x="1732" fg:w="3"/><text x="41.5865%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (13 samples, 0.31%)</title><rect x="41.1217%" y="421" width="0.3103%" height="15" fill="rgb(231,60,39)" fg:x="1723" fg:w="13"/><text x="41.3717%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="41.4081%" y="405" width="0.0239%" height="15" fill="rgb(208,69,12)" fg:x="1735" fg:w="1"/><text x="41.6581%" y="415.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (14 samples, 0.33%)</title><rect x="41.1217%" y="437" width="0.3341%" height="15" fill="rgb(235,93,37)" fg:x="1723" fg:w="14"/><text x="41.3717%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="41.4320%" y="421" width="0.0239%" height="15" fill="rgb(213,116,39)" fg:x="1736" fg:w="1"/><text x="41.6820%" y="431.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.38%)</title><rect x="41.0979%" y="453" width="0.3819%" height="15" fill="rgb(222,207,29)" fg:x="1722" fg:w="16"/><text x="41.3479%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="41.4558%" y="437" width="0.0239%" height="15" fill="rgb(206,96,30)" fg:x="1737" fg:w="1"/><text x="41.7058%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (259 samples, 6.18%)</title><rect x="43.9618%" y="437" width="6.1814%" height="15" fill="rgb(218,138,4)" fg:x="1842" fg:w="259"/><text x="44.2118%" y="447.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (252 samples, 6.01%)</title><rect x="44.1289%" y="421" width="6.0143%" height="15" fill="rgb(250,191,14)" fg:x="1849" fg:w="252"/><text x="44.3789%" y="431.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.10%)</title><rect x="50.0477%" y="405" width="0.0955%" height="15" fill="rgb(239,60,40)" fg:x="2097" fg:w="4"/><text x="50.2977%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="50.1432%" y="437" width="0.0239%" height="15" fill="rgb(206,27,48)" fg:x="2101" fg:w="1"/><text x="50.3932%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (10 samples, 0.24%)</title><rect x="50.3341%" y="421" width="0.2387%" height="15" fill="rgb(225,35,8)" fg:x="2109" fg:w="10"/><text x="50.5841%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.14%)</title><rect x="50.5728%" y="421" width="0.1432%" height="15" fill="rgb(250,213,24)" fg:x="2119" fg:w="6"/><text x="50.8228%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.07%)</title><rect x="51.5274%" y="405" width="0.0716%" height="15" fill="rgb(247,123,22)" fg:x="2159" fg:w="3"/><text x="51.7774%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (2 samples, 0.05%)</title><rect x="51.5990%" y="405" width="0.0477%" height="15" fill="rgb(231,138,38)" fg:x="2162" fg:w="2"/><text x="51.8490%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (2 samples, 0.05%)</title><rect x="51.5990%" y="389" width="0.0477%" height="15" fill="rgb(231,145,46)" fg:x="2162" fg:w="2"/><text x="51.8490%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (41 samples, 0.98%)</title><rect x="51.6468%" y="405" width="0.9785%" height="15" fill="rgb(251,118,11)" fg:x="2164" fg:w="41"/><text x="51.8968%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.12%)</title><rect x="54.2721%" y="389" width="0.1193%" height="15" fill="rgb(217,147,25)" fg:x="2274" fg:w="5"/><text x="54.5221%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (179 samples, 4.27%)</title><rect x="50.1671%" y="437" width="4.2721%" height="15" fill="rgb(247,81,37)" fg:x="2102" fg:w="179"/><text x="50.4171%" y="447.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (156 samples, 3.72%)</title><rect x="50.7160%" y="421" width="3.7232%" height="15" fill="rgb(209,12,38)" fg:x="2125" fg:w="156"/><text x="50.9660%" y="431.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (76 samples, 1.81%)</title><rect x="52.6253%" y="405" width="1.8138%" height="15" fill="rgb(227,1,9)" fg:x="2205" fg:w="76"/><text x="52.8753%" y="415.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.05%)</title><rect x="54.3914%" y="389" width="0.0477%" height="15" fill="rgb(248,47,43)" fg:x="2279" fg:w="2"/><text x="54.6414%" y="399.50"></text></g><g><title>itrees`itrees::tree::OwnedTree::new (550 samples, 13.13%)</title><rect x="41.4797%" y="453" width="13.1265%" height="15" fill="rgb(221,10,30)" fg:x="1738" fg:w="550"/><text x="41.7297%" y="463.50">itrees`itrees::tree:..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.17%)</title><rect x="54.4391%" y="437" width="0.1671%" height="15" fill="rgb(210,229,1)" fg:x="2281" fg:w="7"/><text x="54.6891%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (120 samples, 2.86%)</title><rect x="54.6062%" y="453" width="2.8640%" height="15" fill="rgb(222,148,37)" fg:x="2288" fg:w="120"/><text x="54.8562%" y="463.50">li..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (25 samples, 0.60%)</title><rect x="57.4702%" y="453" width="0.5967%" height="15" fill="rgb(234,67,33)" fg:x="2408" fg:w="25"/><text x="57.7202%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.07%)</title><rect x="58.0668%" y="453" width="0.0716%" height="15" fill="rgb(247,98,35)" fg:x="2433" fg:w="3"/><text x="58.3168%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (5 samples, 0.12%)</title><rect x="58.6158%" y="437" width="0.1193%" height="15" fill="rgb(247,138,52)" fg:x="2456" fg:w="5"/><text x="58.8658%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="58.7351%" y="437" width="0.0239%" height="15" fill="rgb(213,79,30)" fg:x="2461" fg:w="1"/><text x="58.9851%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (24 samples, 0.57%)</title><rect x="59.0931%" y="421" width="0.5728%" height="15" fill="rgb(246,177,23)" fg:x="2476" fg:w="24"/><text x="59.3431%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (65 samples, 1.55%)</title><rect x="58.1384%" y="453" width="1.5513%" height="15" fill="rgb(230,62,27)" fg:x="2436" fg:w="65"/><text x="58.3884%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (39 samples, 0.93%)</title><rect x="58.7589%" y="437" width="0.9308%" height="15" fill="rgb(216,154,8)" fg:x="2462" fg:w="39"/><text x="59.0089%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="59.6659%" y="421" width="0.0239%" height="15" fill="rgb(244,35,45)" fg:x="2500" fg:w="1"/><text x="59.9159%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.05%)</title><rect x="59.6897%" y="453" width="0.0477%" height="15" fill="rgb(251,115,12)" fg:x="2501" fg:w="2"/><text x="59.9397%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (271 samples, 6.47%)</title><rect x="59.7375%" y="453" width="6.4678%" height="15" fill="rgb(240,54,50)" fg:x="2503" fg:w="271"/><text x="59.9875%" y="463.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="66.2053%" y="453" width="0.0716%" height="15" fill="rgb(233,84,52)" fg:x="2774" fg:w="3"/><text x="66.4553%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.05%)</title><rect x="66.2768%" y="453" width="0.0477%" height="15" fill="rgb(207,117,47)" fg:x="2777" fg:w="2"/><text x="66.5268%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (187 samples, 4.46%)</title><rect x="66.3246%" y="453" width="4.4630%" height="15" fill="rgb(249,43,39)" fg:x="2779" fg:w="187"/><text x="66.5746%" y="463.50">libsy..</text></g><g><title>itrees`itrees::Net::commute (1,827 samples, 43.60%)</title><rect x="27.3747%" y="469" width="43.6038%" height="15" fill="rgb(209,38,44)" fg:x="1147" fg:w="1827"/><text x="27.6247%" y="479.50">itrees`itrees::Net::commute</text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.19%)</title><rect x="70.7876%" y="453" width="0.1909%" height="15" fill="rgb(236,212,23)" fg:x="2966" fg:w="8"/><text x="71.0376%" y="463.50"></text></g><g><title>itrees`itrees::tree::OwnedTree::new (78 samples, 1.86%)</title><rect x="70.9785%" y="469" width="1.8616%" height="15" fill="rgb(242,79,21)" fg:x="2974" fg:w="78"/><text x="71.2285%" y="479.50">i..</text></g><g><title>itrees`itrees::tree::OwnedTree::take (3 samples, 0.07%)</title><rect x="72.8401%" y="469" width="0.0716%" height="15" fill="rgb(211,96,35)" fg:x="3052" fg:w="3"/><text x="73.0901%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (204 samples, 4.87%)</title><rect x="72.9117%" y="469" width="4.8687%" height="15" fill="rgb(253,215,40)" fg:x="3055" fg:w="204"/><text x="73.1617%" y="479.50">libsys..</text></g><g><title>libsystem_malloc.dylib`_szone_free (10 samples, 0.24%)</title><rect x="77.7804%" y="469" width="0.2387%" height="15" fill="rgb(211,81,21)" fg:x="3259" fg:w="10"/><text x="78.0304%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (63 samples, 1.50%)</title><rect x="78.0191%" y="469" width="1.5036%" height="15" fill="rgb(208,190,38)" fg:x="3269" fg:w="63"/><text x="78.2691%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (3 samples, 0.07%)</title><rect x="79.8091%" y="453" width="0.0716%" height="15" fill="rgb(235,213,38)" fg:x="3344" fg:w="3"/><text x="80.0591%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.14%)</title><rect x="80.3341%" y="437" width="0.1432%" height="15" fill="rgb(237,122,38)" fg:x="3366" fg:w="6"/><text x="80.5841%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (42 samples, 1.00%)</title><rect x="79.5227%" y="469" width="1.0024%" height="15" fill="rgb(244,218,35)" fg:x="3332" fg:w="42"/><text x="79.7727%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (27 samples, 0.64%)</title><rect x="79.8807%" y="453" width="0.6444%" height="15" fill="rgb(240,68,47)" fg:x="3347" fg:w="27"/><text x="80.1307%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.05%)</title><rect x="80.4773%" y="437" width="0.0477%" height="15" fill="rgb(210,16,53)" fg:x="3372" fg:w="2"/><text x="80.7273%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.10%)</title><rect x="80.5251%" y="469" width="0.0955%" height="15" fill="rgb(235,124,12)" fg:x="3374" fg:w="4"/><text x="80.7751%" y="479.50"></text></g><g><title>libsystem_platform.dylib`__bzero (10 samples, 0.24%)</title><rect x="80.6205%" y="469" width="0.2387%" height="15" fill="rgb(224,169,11)" fg:x="3378" fg:w="10"/><text x="80.8705%" y="479.50"></text></g><g><title>itrees`itrees::inner (3,370 samples, 80.43%)</title><rect x="1.3126%" y="485" width="80.4296%" height="15" fill="rgb(250,166,2)" fg:x="55" fg:w="3370"/><text x="1.5626%" y="495.50">itrees`itrees::inner</text></g><g><title>libsystem_platform.dylib`_platform_memset (37 samples, 0.88%)</title><rect x="80.8592%" y="469" width="0.8831%" height="15" fill="rgb(242,216,29)" fg:x="3388" fg:w="37"/><text x="81.1092%" y="479.50"></text></g><g><title>itrees`&lt;itrees::parse::Token as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="81.8138%" y="469" width="0.0239%" height="15" fill="rgb(230,116,27)" fg:x="3428" fg:w="1"/><text x="82.0638%" y="479.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="81.8377%" y="469" width="0.0477%" height="15" fill="rgb(228,99,48)" fg:x="3429" fg:w="2"/><text x="82.0877%" y="479.50"></text></g><g><title>itrees`DYLD-STUB$$malloc (2 samples, 0.05%)</title><rect x="81.8854%" y="469" width="0.0477%" height="15" fill="rgb(253,11,6)" fg:x="3431" fg:w="2"/><text x="82.1354%" y="479.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="81.9332%" y="469" width="0.0239%" height="15" fill="rgb(247,143,39)" fg:x="3433" fg:w="1"/><text x="82.1832%" y="479.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (2 samples, 0.05%)</title><rect x="81.9570%" y="469" width="0.0477%" height="15" fill="rgb(236,97,10)" fg:x="3434" fg:w="2"/><text x="82.2070%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.05%)</title><rect x="81.9570%" y="453" width="0.0477%" height="15" fill="rgb(233,208,19)" fg:x="3434" fg:w="2"/><text x="82.2070%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.05%)</title><rect x="81.9570%" y="437" width="0.0477%" height="15" fill="rgb(216,164,2)" fg:x="3434" fg:w="2"/><text x="82.2070%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.05%)</title><rect x="81.9570%" y="421" width="0.0477%" height="15" fill="rgb(220,129,5)" fg:x="3434" fg:w="2"/><text x="82.2070%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="81.9809%" y="405" width="0.0239%" height="15" fill="rgb(242,17,10)" fg:x="3435" fg:w="1"/><text x="82.2309%" y="415.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="82.2673%" y="453" width="0.0477%" height="15" fill="rgb(242,107,0)" fg:x="3447" fg:w="2"/><text x="82.5173%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="82.3389%" y="421" width="0.0239%" height="15" fill="rgb(251,28,31)" fg:x="3450" fg:w="1"/><text x="82.5889%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="82.3389%" y="405" width="0.0239%" height="15" fill="rgb(233,223,10)" fg:x="3450" fg:w="1"/><text x="82.5889%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="82.3389%" y="389" width="0.0239%" height="15" fill="rgb(215,21,27)" fg:x="3450" fg:w="1"/><text x="82.5889%" y="399.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.10%)</title><rect x="82.3150%" y="453" width="0.0955%" height="15" fill="rgb(232,23,21)" fg:x="3449" fg:w="4"/><text x="82.5650%" y="463.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (3 samples, 0.07%)</title><rect x="82.3389%" y="437" width="0.0716%" height="15" fill="rgb(244,5,23)" fg:x="3450" fg:w="3"/><text x="82.5889%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.05%)</title><rect x="82.3628%" y="421" width="0.0477%" height="15" fill="rgb(226,81,46)" fg:x="3451" fg:w="2"/><text x="82.6128%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="82.4582%" y="421" width="0.0239%" height="15" fill="rgb(247,70,30)" fg:x="3455" fg:w="1"/><text x="82.7082%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="82.4582%" y="405" width="0.0239%" height="15" fill="rgb(212,68,19)" fg:x="3455" fg:w="1"/><text x="82.7082%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.05%)</title><rect x="82.4582%" y="437" width="0.0477%" height="15" fill="rgb(240,187,13)" fg:x="3455" fg:w="2"/><text x="82.7082%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="82.4821%" y="421" width="0.0239%" height="15" fill="rgb(223,113,26)" fg:x="3456" fg:w="1"/><text x="82.7321%" y="431.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (6 samples, 0.14%)</title><rect x="82.4105%" y="453" width="0.1432%" height="15" fill="rgb(206,192,2)" fg:x="3453" fg:w="6"/><text x="82.6605%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.05%)</title><rect x="82.5060%" y="437" width="0.0477%" height="15" fill="rgb(241,108,4)" fg:x="3457" fg:w="2"/><text x="82.7560%" y="447.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.10%)</title><rect x="82.5776%" y="437" width="0.0955%" height="15" fill="rgb(247,173,49)" fg:x="3460" fg:w="4"/><text x="82.8276%" y="447.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="82.6730%" y="437" width="0.0477%" height="15" fill="rgb(224,114,35)" fg:x="3464" fg:w="2"/><text x="82.9230%" y="447.50"></text></g><g><title>itrees`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="82.7208%" y="437" width="0.0239%" height="15" fill="rgb(245,159,27)" fg:x="3466" fg:w="1"/><text x="82.9708%" y="447.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (10 samples, 0.24%)</title><rect x="82.5537%" y="453" width="0.2387%" height="15" fill="rgb(245,172,44)" fg:x="3459" fg:w="10"/><text x="82.8037%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="82.7446%" y="437" width="0.0477%" height="15" fill="rgb(236,23,11)" fg:x="3467" fg:w="2"/><text x="82.9946%" y="447.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.10%)</title><rect x="83.2220%" y="437" width="0.0955%" height="15" fill="rgb(205,117,38)" fg:x="3487" fg:w="4"/><text x="83.4720%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="83.3174%" y="373" width="0.0716%" height="15" fill="rgb(237,72,25)" fg:x="3491" fg:w="3"/><text x="83.5674%" y="383.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.12%)</title><rect x="83.3174%" y="437" width="0.1193%" height="15" fill="rgb(244,70,9)" fg:x="3491" fg:w="5"/><text x="83.5674%" y="447.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (5 samples, 0.12%)</title><rect x="83.3174%" y="421" width="0.1193%" height="15" fill="rgb(217,125,39)" fg:x="3491" fg:w="5"/><text x="83.5674%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.12%)</title><rect x="83.3174%" y="405" width="0.1193%" height="15" fill="rgb(235,36,10)" fg:x="3491" fg:w="5"/><text x="83.5674%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.12%)</title><rect x="83.3174%" y="389" width="0.1193%" height="15" fill="rgb(251,123,47)" fg:x="3491" fg:w="5"/><text x="83.5674%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.05%)</title><rect x="83.3890%" y="373" width="0.0477%" height="15" fill="rgb(221,13,13)" fg:x="3494" fg:w="2"/><text x="83.6390%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="83.3890%" y="357" width="0.0477%" height="15" fill="rgb(238,131,9)" fg:x="3494" fg:w="2"/><text x="83.6390%" y="367.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="83.4368%" y="437" width="0.0239%" height="15" fill="rgb(211,50,8)" fg:x="3496" fg:w="1"/><text x="83.6868%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="83.4368%" y="421" width="0.0239%" height="15" fill="rgb(245,182,24)" fg:x="3496" fg:w="1"/><text x="83.6868%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="83.4368%" y="405" width="0.0239%" height="15" fill="rgb(242,14,37)" fg:x="3496" fg:w="1"/><text x="83.6868%" y="415.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="83.4606%" y="421" width="0.0239%" height="15" fill="rgb(246,228,12)" fg:x="3497" fg:w="1"/><text x="83.7106%" y="431.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.05%)</title><rect x="83.4606%" y="437" width="0.0477%" height="15" fill="rgb(213,55,15)" fg:x="3497" fg:w="2"/><text x="83.7106%" y="447.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="83.4845%" y="421" width="0.0239%" height="15" fill="rgb(209,9,3)" fg:x="3498" fg:w="1"/><text x="83.7345%" y="431.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.10%)</title><rect x="83.6038%" y="421" width="0.0955%" height="15" fill="rgb(230,59,30)" fg:x="3503" fg:w="4"/><text x="83.8538%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="83.7232%" y="389" width="0.0239%" height="15" fill="rgb(209,121,21)" fg:x="3508" fg:w="1"/><text x="83.9732%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="83.7470%" y="357" width="0.0477%" height="15" fill="rgb(220,109,13)" fg:x="3509" fg:w="2"/><text x="83.9970%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="83.7947%" y="357" width="0.0477%" height="15" fill="rgb(232,18,1)" fg:x="3511" fg:w="2"/><text x="84.0447%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.10%)</title><rect x="83.8425%" y="357" width="0.0955%" height="15" fill="rgb(215,41,42)" fg:x="3513" fg:w="4"/><text x="84.0925%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.10%)</title><rect x="83.8425%" y="341" width="0.0955%" height="15" fill="rgb(224,123,36)" fg:x="3513" fg:w="4"/><text x="84.0925%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (9 samples, 0.21%)</title><rect x="83.7470%" y="373" width="0.2148%" height="15" fill="rgb(240,125,3)" fg:x="3509" fg:w="9"/><text x="83.9970%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="83.9379%" y="357" width="0.0239%" height="15" fill="rgb(205,98,50)" fg:x="3517" fg:w="1"/><text x="84.1879%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (10 samples, 0.24%)</title><rect x="83.7470%" y="389" width="0.2387%" height="15" fill="rgb(205,185,37)" fg:x="3509" fg:w="10"/><text x="83.9970%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="83.9618%" y="373" width="0.0239%" height="15" fill="rgb(238,207,15)" fg:x="3518" fg:w="1"/><text x="84.2118%" y="383.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (12 samples, 0.29%)</title><rect x="83.7232%" y="405" width="0.2864%" height="15" fill="rgb(213,199,42)" fg:x="3508" fg:w="12"/><text x="83.9732%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="83.9857%" y="389" width="0.0239%" height="15" fill="rgb(235,201,11)" fg:x="3519" fg:w="1"/><text x="84.2357%" y="399.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 0.33%)</title><rect x="83.6993%" y="421" width="0.3341%" height="15" fill="rgb(207,46,11)" fg:x="3507" fg:w="14"/><text x="83.9493%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="84.0095%" y="405" width="0.0239%" height="15" fill="rgb(241,35,35)" fg:x="3520" fg:w="1"/><text x="84.2595%" y="415.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.05%)</title><rect x="84.0334%" y="421" width="0.0477%" height="15" fill="rgb(243,32,47)" fg:x="3521" fg:w="2"/><text x="84.2834%" y="431.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="84.0573%" y="405" width="0.0239%" height="15" fill="rgb(247,202,23)" fg:x="3522" fg:w="1"/><text x="84.3073%" y="415.50"></text></g><g><title>itrees`&lt;itrees::parse::Token as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="84.1289%" y="405" width="0.0239%" height="15" fill="rgb(219,102,11)" fg:x="3525" fg:w="1"/><text x="84.3789%" y="415.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.17%)</title><rect x="84.1527%" y="405" width="0.1671%" height="15" fill="rgb(243,110,44)" fg:x="3526" fg:w="7"/><text x="84.4027%" y="415.50"></text></g><g><title>itrees`__rdl_alloc (1 samples, 0.02%)</title><rect x="84.3198%" y="405" width="0.0239%" height="15" fill="rgb(222,74,54)" fg:x="3533" fg:w="1"/><text x="84.5698%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="84.3675%" y="373" width="0.0239%" height="15" fill="rgb(216,99,12)" fg:x="3535" fg:w="1"/><text x="84.6175%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="84.3675%" y="357" width="0.0239%" height="15" fill="rgb(226,22,26)" fg:x="3535" fg:w="1"/><text x="84.6175%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="84.3675%" y="341" width="0.0239%" height="15" fill="rgb(217,163,10)" fg:x="3535" fg:w="1"/><text x="84.6175%" y="351.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.07%)</title><rect x="84.3437%" y="405" width="0.0716%" height="15" fill="rgb(213,25,53)" fg:x="3534" fg:w="3"/><text x="84.5937%" y="415.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="84.3675%" y="389" width="0.0477%" height="15" fill="rgb(252,105,26)" fg:x="3535" fg:w="2"/><text x="84.6175%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="84.3914%" y="373" width="0.0239%" height="15" fill="rgb(220,39,43)" fg:x="3536" fg:w="1"/><text x="84.6414%" y="383.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="84.4153%" y="405" width="0.0239%" height="15" fill="rgb(229,68,48)" fg:x="3537" fg:w="1"/><text x="84.6653%" y="415.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="84.4391%" y="405" width="0.0239%" height="15" fill="rgb(252,8,32)" fg:x="3538" fg:w="1"/><text x="84.6891%" y="415.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.07%)</title><rect x="84.4630%" y="389" width="0.0716%" height="15" fill="rgb(223,20,43)" fg:x="3539" fg:w="3"/><text x="84.7130%" y="399.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.10%)</title><rect x="84.4630%" y="405" width="0.0955%" height="15" fill="rgb(229,81,49)" fg:x="3539" fg:w="4"/><text x="84.7130%" y="415.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="84.5346%" y="389" width="0.0239%" height="15" fill="rgb(236,28,36)" fg:x="3542" fg:w="1"/><text x="84.7846%" y="399.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="84.7255%" y="389" width="0.0477%" height="15" fill="rgb(249,185,26)" fg:x="3550" fg:w="2"/><text x="84.9755%" y="399.50"></text></g><g><title>itrees`__rdl_alloc (2 samples, 0.05%)</title><rect x="84.7733%" y="389" width="0.0477%" height="15" fill="rgb(249,174,33)" fg:x="3552" fg:w="2"/><text x="85.0233%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="84.8687%" y="325" width="0.0239%" height="15" fill="rgb(233,201,37)" fg:x="3556" fg:w="1"/><text x="85.1187%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.07%)</title><rect x="84.8926%" y="325" width="0.0716%" height="15" fill="rgb(221,78,26)" fg:x="3557" fg:w="3"/><text x="85.1426%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.07%)</title><rect x="84.8926%" y="309" width="0.0716%" height="15" fill="rgb(250,127,30)" fg:x="3557" fg:w="3"/><text x="85.1426%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (6 samples, 0.14%)</title><rect x="84.8449%" y="357" width="0.1432%" height="15" fill="rgb(230,49,44)" fg:x="3555" fg:w="6"/><text x="85.0949%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (6 samples, 0.14%)</title><rect x="84.8449%" y="341" width="0.1432%" height="15" fill="rgb(229,67,23)" fg:x="3555" fg:w="6"/><text x="85.0949%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="84.9642%" y="325" width="0.0239%" height="15" fill="rgb(249,83,47)" fg:x="3560" fg:w="1"/><text x="85.2142%" y="335.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.19%)</title><rect x="84.8210%" y="389" width="0.1909%" height="15" fill="rgb(215,43,3)" fg:x="3554" fg:w="8"/><text x="85.0710%" y="399.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (7 samples, 0.17%)</title><rect x="84.8449%" y="373" width="0.1671%" height="15" fill="rgb(238,154,13)" fg:x="3555" fg:w="7"/><text x="85.0949%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="84.9881%" y="357" width="0.0239%" height="15" fill="rgb(219,56,2)" fg:x="3561" fg:w="1"/><text x="85.2381%" y="367.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="85.0119%" y="389" width="0.0239%" height="15" fill="rgb(233,0,4)" fg:x="3562" fg:w="1"/><text x="85.2619%" y="399.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.07%)</title><rect x="85.1074%" y="373" width="0.0716%" height="15" fill="rgb(235,30,7)" fg:x="3566" fg:w="3"/><text x="85.3574%" y="383.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 0.17%)</title><rect x="85.0358%" y="389" width="0.1671%" height="15" fill="rgb(250,79,13)" fg:x="3563" fg:w="7"/><text x="85.2858%" y="399.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="85.1790%" y="373" width="0.0239%" height="15" fill="rgb(211,146,34)" fg:x="3569" fg:w="1"/><text x="85.4290%" y="383.50"></text></g><g><title>itrees`&lt;itrees::parse::Token as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="85.2983%" y="373" width="0.0239%" height="15" fill="rgb(228,22,38)" fg:x="3574" fg:w="1"/><text x="85.5483%" y="383.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.10%)</title><rect x="85.3222%" y="373" width="0.0955%" height="15" fill="rgb(235,168,5)" fg:x="3575" fg:w="4"/><text x="85.5722%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="85.4177%" y="309" width="0.0239%" height="15" fill="rgb(221,155,16)" fg:x="3579" fg:w="1"/><text x="85.6677%" y="319.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.05%)</title><rect x="85.4177%" y="373" width="0.0477%" height="15" fill="rgb(215,215,53)" fg:x="3579" fg:w="2"/><text x="85.6677%" y="383.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="85.4177%" y="357" width="0.0477%" height="15" fill="rgb(223,4,10)" fg:x="3579" fg:w="2"/><text x="85.6677%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.05%)</title><rect x="85.4177%" y="341" width="0.0477%" height="15" fill="rgb(234,103,6)" fg:x="3579" fg:w="2"/><text x="85.6677%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.05%)</title><rect x="85.4177%" y="325" width="0.0477%" height="15" fill="rgb(227,97,0)" fg:x="3579" fg:w="2"/><text x="85.6677%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="85.4415%" y="309" width="0.0239%" height="15" fill="rgb(234,150,53)" fg:x="3580" fg:w="1"/><text x="85.6915%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="85.4415%" y="293" width="0.0239%" height="15" fill="rgb(228,201,54)" fg:x="3580" fg:w="1"/><text x="85.6915%" y="303.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="85.4654%" y="357" width="0.0477%" height="15" fill="rgb(222,22,37)" fg:x="3581" fg:w="2"/><text x="85.7154%" y="367.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.10%)</title><rect x="85.4654%" y="373" width="0.0955%" height="15" fill="rgb(237,53,32)" fg:x="3581" fg:w="4"/><text x="85.7154%" y="383.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="85.5131%" y="357" width="0.0477%" height="15" fill="rgb(233,25,53)" fg:x="3583" fg:w="2"/><text x="85.7631%" y="367.50"></text></g><g><title>itrees`&lt;itrees::parse::Token as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="85.7757%" y="357" width="0.0239%" height="15" fill="rgb(210,40,34)" fg:x="3594" fg:w="1"/><text x="86.0257%" y="367.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="85.7995%" y="357" width="0.0716%" height="15" fill="rgb(241,220,44)" fg:x="3595" fg:w="3"/><text x="86.0495%" y="367.50"></text></g><g><title>itrees`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="85.8711%" y="357" width="0.0239%" height="15" fill="rgb(235,28,35)" fg:x="3598" fg:w="1"/><text x="86.1211%" y="367.50"></text></g><g><title>itrees`__rdl_alloc (1 samples, 0.02%)</title><rect x="85.8950%" y="357" width="0.0239%" height="15" fill="rgb(210,56,17)" fg:x="3599" fg:w="1"/><text x="86.1450%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="85.9427%" y="293" width="0.0239%" height="15" fill="rgb(224,130,29)" fg:x="3601" fg:w="1"/><text x="86.1927%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="85.9666%" y="293" width="0.0477%" height="15" fill="rgb(235,212,8)" fg:x="3602" fg:w="2"/><text x="86.2166%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.05%)</title><rect x="86.0143%" y="293" width="0.0477%" height="15" fill="rgb(223,33,50)" fg:x="3604" fg:w="2"/><text x="86.2643%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="86.0143%" y="277" width="0.0477%" height="15" fill="rgb(219,149,13)" fg:x="3604" fg:w="2"/><text x="86.2643%" y="287.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.17%)</title><rect x="85.9189%" y="357" width="0.1671%" height="15" fill="rgb(250,156,29)" fg:x="3600" fg:w="7"/><text x="86.1689%" y="367.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (7 samples, 0.17%)</title><rect x="85.9189%" y="341" width="0.1671%" height="15" fill="rgb(216,193,19)" fg:x="3600" fg:w="7"/><text x="86.1689%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.17%)</title><rect x="85.9189%" y="325" width="0.1671%" height="15" fill="rgb(216,135,14)" fg:x="3600" fg:w="7"/><text x="86.1689%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 0.17%)</title><rect x="85.9189%" y="309" width="0.1671%" height="15" fill="rgb(241,47,5)" fg:x="3600" fg:w="7"/><text x="86.1689%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="86.0621%" y="293" width="0.0239%" height="15" fill="rgb(233,42,35)" fg:x="3606" fg:w="1"/><text x="86.3121%" y="303.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="86.0859%" y="357" width="0.0239%" height="15" fill="rgb(231,13,6)" fg:x="3607" fg:w="1"/><text x="86.3359%" y="367.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.12%)</title><rect x="86.1098%" y="357" width="0.1193%" height="15" fill="rgb(207,181,40)" fg:x="3608" fg:w="5"/><text x="86.3598%" y="367.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.07%)</title><rect x="86.1575%" y="341" width="0.0716%" height="15" fill="rgb(254,173,49)" fg:x="3610" fg:w="3"/><text x="86.4075%" y="351.50"></text></g><g><title>itrees`&lt;itrees::parse::Token as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="86.4200%" y="341" width="0.0239%" height="15" fill="rgb(221,1,38)" fg:x="3621" fg:w="1"/><text x="86.6700%" y="351.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.10%)</title><rect x="86.4439%" y="341" width="0.0955%" height="15" fill="rgb(206,124,46)" fg:x="3622" fg:w="4"/><text x="86.6939%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="86.5394%" y="277" width="0.0239%" height="15" fill="rgb(249,21,11)" fg:x="3626" fg:w="1"/><text x="86.7894%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="86.5632%" y="277" width="0.0239%" height="15" fill="rgb(222,201,40)" fg:x="3627" fg:w="1"/><text x="86.8132%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.07%)</title><rect x="86.5871%" y="277" width="0.0716%" height="15" fill="rgb(235,61,29)" fg:x="3628" fg:w="3"/><text x="86.8371%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="86.6110%" y="261" width="0.0477%" height="15" fill="rgb(219,207,3)" fg:x="3629" fg:w="2"/><text x="86.8610%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (6 samples, 0.14%)</title><rect x="86.5394%" y="309" width="0.1432%" height="15" fill="rgb(222,56,46)" fg:x="3626" fg:w="6"/><text x="86.7894%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (6 samples, 0.14%)</title><rect x="86.5394%" y="293" width="0.1432%" height="15" fill="rgb(239,76,54)" fg:x="3626" fg:w="6"/><text x="86.7894%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="86.6587%" y="277" width="0.0239%" height="15" fill="rgb(231,124,27)" fg:x="3631" fg:w="1"/><text x="86.9087%" y="287.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.17%)</title><rect x="86.5394%" y="341" width="0.1671%" height="15" fill="rgb(249,195,6)" fg:x="3626" fg:w="7"/><text x="86.7894%" y="351.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (7 samples, 0.17%)</title><rect x="86.5394%" y="325" width="0.1671%" height="15" fill="rgb(237,174,47)" fg:x="3626" fg:w="7"/><text x="86.7894%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="86.6826%" y="309" width="0.0239%" height="15" fill="rgb(206,201,31)" fg:x="3632" fg:w="1"/><text x="86.9326%" y="319.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (2 samples, 0.05%)</title><rect x="86.7064%" y="341" width="0.0477%" height="15" fill="rgb(231,57,52)" fg:x="3633" fg:w="2"/><text x="86.9564%" y="351.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.07%)</title><rect x="86.7542%" y="341" width="0.0716%" height="15" fill="rgb(248,177,22)" fg:x="3635" fg:w="3"/><text x="87.0042%" y="351.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="86.7780%" y="325" width="0.0477%" height="15" fill="rgb(215,211,37)" fg:x="3636" fg:w="2"/><text x="87.0280%" y="335.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.10%)</title><rect x="86.8974%" y="325" width="0.0955%" height="15" fill="rgb(241,128,51)" fg:x="3641" fg:w="4"/><text x="87.1474%" y="335.50"></text></g><g><title>itrees`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="87.0167%" y="309" width="0.0239%" height="15" fill="rgb(227,165,31)" fg:x="3646" fg:w="1"/><text x="87.2667%" y="319.50"></text></g><g><title>itrees`__rdl_realloc (1 samples, 0.02%)</title><rect x="87.0406%" y="309" width="0.0239%" height="15" fill="rgb(228,167,24)" fg:x="3647" fg:w="1"/><text x="87.2906%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="87.0644%" y="293" width="0.0239%" height="15" fill="rgb(228,143,12)" fg:x="3648" fg:w="1"/><text x="87.3144%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="87.1122%" y="261" width="0.0239%" height="15" fill="rgb(249,149,8)" fg:x="3650" fg:w="1"/><text x="87.3622%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="87.1360%" y="261" width="0.0239%" height="15" fill="rgb(243,35,44)" fg:x="3651" fg:w="1"/><text x="87.3860%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="87.1360%" y="245" width="0.0239%" height="15" fill="rgb(246,89,9)" fg:x="3651" fg:w="1"/><text x="87.3860%" y="255.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (5 samples, 0.12%)</title><rect x="87.0644%" y="309" width="0.1193%" height="15" fill="rgb(233,213,13)" fg:x="3648" fg:w="5"/><text x="87.3144%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.10%)</title><rect x="87.0883%" y="293" width="0.0955%" height="15" fill="rgb(233,141,41)" fg:x="3649" fg:w="4"/><text x="87.3383%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.07%)</title><rect x="87.1122%" y="277" width="0.0716%" height="15" fill="rgb(239,167,4)" fg:x="3650" fg:w="3"/><text x="87.3622%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="87.1599%" y="261" width="0.0239%" height="15" fill="rgb(209,217,16)" fg:x="3652" fg:w="1"/><text x="87.4099%" y="271.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.24%)</title><rect x="86.9928%" y="325" width="0.2387%" height="15" fill="rgb(219,88,35)" fg:x="3645" fg:w="10"/><text x="87.2428%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.05%)</title><rect x="87.1838%" y="309" width="0.0477%" height="15" fill="rgb(220,193,23)" fg:x="3653" fg:w="2"/><text x="87.4338%" y="319.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="87.2315%" y="325" width="0.0239%" height="15" fill="rgb(230,90,52)" fg:x="3655" fg:w="1"/><text x="87.4815%" y="335.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="87.2792%" y="309" width="0.0239%" height="15" fill="rgb(252,106,19)" fg:x="3657" fg:w="1"/><text x="87.5292%" y="319.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.07%)</title><rect x="87.2554%" y="325" width="0.0716%" height="15" fill="rgb(206,74,20)" fg:x="3656" fg:w="3"/><text x="87.5054%" y="335.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="87.3031%" y="309" width="0.0239%" height="15" fill="rgb(230,138,44)" fg:x="3658" fg:w="1"/><text x="87.5531%" y="319.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="87.5179%" y="309" width="0.0716%" height="15" fill="rgb(235,182,43)" fg:x="3667" fg:w="3"/><text x="87.7679%" y="319.50"></text></g><g><title>itrees`__rdl_alloc (1 samples, 0.02%)</title><rect x="87.5895%" y="309" width="0.0239%" height="15" fill="rgb(242,16,51)" fg:x="3670" fg:w="1"/><text x="87.8395%" y="319.50"></text></g><g><title>itrees`__rdl_realloc (1 samples, 0.02%)</title><rect x="87.6372%" y="293" width="0.0239%" height="15" fill="rgb(248,9,4)" fg:x="3672" fg:w="1"/><text x="87.8872%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="87.6611%" y="245" width="0.0477%" height="15" fill="rgb(210,31,22)" fg:x="3673" fg:w="2"/><text x="87.9111%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="87.7088%" y="229" width="0.0477%" height="15" fill="rgb(239,54,39)" fg:x="3675" fg:w="2"/><text x="87.9588%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="87.7566%" y="229" width="0.0239%" height="15" fill="rgb(230,99,41)" fg:x="3677" fg:w="1"/><text x="88.0066%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="87.7566%" y="213" width="0.0239%" height="15" fill="rgb(253,106,12)" fg:x="3677" fg:w="1"/><text x="88.0066%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="87.7566%" y="197" width="0.0239%" height="15" fill="rgb(213,46,41)" fg:x="3677" fg:w="1"/><text x="88.0066%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="87.7566%" y="181" width="0.0239%" height="15" fill="rgb(215,133,35)" fg:x="3677" fg:w="1"/><text x="88.0066%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.17%)</title><rect x="87.6611%" y="277" width="0.1671%" height="15" fill="rgb(213,28,5)" fg:x="3673" fg:w="7"/><text x="87.9111%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 0.17%)</title><rect x="87.6611%" y="261" width="0.1671%" height="15" fill="rgb(215,77,49)" fg:x="3673" fg:w="7"/><text x="87.9111%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 0.12%)</title><rect x="87.7088%" y="245" width="0.1193%" height="15" fill="rgb(248,100,22)" fg:x="3675" fg:w="5"/><text x="87.9588%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.05%)</title><rect x="87.7804%" y="229" width="0.0477%" height="15" fill="rgb(208,67,9)" fg:x="3678" fg:w="2"/><text x="88.0304%" y="239.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.24%)</title><rect x="87.6134%" y="309" width="0.2387%" height="15" fill="rgb(219,133,21)" fg:x="3671" fg:w="10"/><text x="87.8634%" y="319.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (8 samples, 0.19%)</title><rect x="87.6611%" y="293" width="0.1909%" height="15" fill="rgb(246,46,29)" fg:x="3673" fg:w="8"/><text x="87.9111%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="87.8282%" y="277" width="0.0239%" height="15" fill="rgb(246,185,52)" fg:x="3680" fg:w="1"/><text x="88.0782%" y="287.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="87.8520%" y="309" width="0.0477%" height="15" fill="rgb(252,136,11)" fg:x="3681" fg:w="2"/><text x="88.1020%" y="319.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="87.8998%" y="309" width="0.0239%" height="15" fill="rgb(219,138,53)" fg:x="3683" fg:w="1"/><text x="88.1498%" y="319.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.12%)</title><rect x="87.9236%" y="309" width="0.1193%" height="15" fill="rgb(211,51,23)" fg:x="3684" fg:w="5"/><text x="88.1736%" y="319.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (3 samples, 0.07%)</title><rect x="87.9714%" y="293" width="0.0716%" height="15" fill="rgb(247,221,28)" fg:x="3686" fg:w="3"/><text x="88.2214%" y="303.50"></text></g><g><title>itrees`&lt;itrees::parse::Token as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="88.1146%" y="293" width="0.0239%" height="15" fill="rgb(251,222,45)" fg:x="3692" fg:w="1"/><text x="88.3646%" y="303.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.12%)</title><rect x="88.1384%" y="293" width="0.1193%" height="15" fill="rgb(217,162,53)" fg:x="3693" fg:w="5"/><text x="88.3884%" y="303.50"></text></g><g><title>itrees`DYLD-STUB$$memcmp (1 samples, 0.02%)</title><rect x="88.2578%" y="293" width="0.0239%" height="15" fill="rgb(229,93,14)" fg:x="3698" fg:w="1"/><text x="88.5078%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="88.2816%" y="261" width="0.0239%" height="15" fill="rgb(209,67,49)" fg:x="3699" fg:w="1"/><text x="88.5316%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="88.3294%" y="229" width="0.0239%" height="15" fill="rgb(213,87,29)" fg:x="3701" fg:w="1"/><text x="88.5794%" y="239.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.10%)</title><rect x="88.2816%" y="293" width="0.0955%" height="15" fill="rgb(205,151,52)" fg:x="3699" fg:w="4"/><text x="88.5316%" y="303.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (4 samples, 0.10%)</title><rect x="88.2816%" y="277" width="0.0955%" height="15" fill="rgb(253,215,39)" fg:x="3699" fg:w="4"/><text x="88.5316%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.07%)</title><rect x="88.3055%" y="261" width="0.0716%" height="15" fill="rgb(221,220,41)" fg:x="3700" fg:w="3"/><text x="88.5555%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.05%)</title><rect x="88.3294%" y="245" width="0.0477%" height="15" fill="rgb(218,133,21)" fg:x="3701" fg:w="2"/><text x="88.5794%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="88.3532%" y="229" width="0.0239%" height="15" fill="rgb(221,193,43)" fg:x="3702" fg:w="1"/><text x="88.6032%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="88.3532%" y="213" width="0.0239%" height="15" fill="rgb(240,128,52)" fg:x="3702" fg:w="1"/><text x="88.6032%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="88.3532%" y="197" width="0.0239%" height="15" fill="rgb(253,114,12)" fg:x="3702" fg:w="1"/><text x="88.6032%" y="207.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="88.3771%" y="293" width="0.0239%" height="15" fill="rgb(215,223,47)" fg:x="3703" fg:w="1"/><text x="88.6271%" y="303.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="88.4010%" y="293" width="0.0239%" height="15" fill="rgb(248,225,23)" fg:x="3704" fg:w="1"/><text x="88.6510%" y="303.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="88.4248%" y="277" width="0.0239%" height="15" fill="rgb(250,108,0)" fg:x="3705" fg:w="1"/><text x="88.6748%" y="287.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.07%)</title><rect x="88.4248%" y="293" width="0.0716%" height="15" fill="rgb(228,208,7)" fg:x="3705" fg:w="3"/><text x="88.6748%" y="303.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="88.4487%" y="277" width="0.0477%" height="15" fill="rgb(244,45,10)" fg:x="3706" fg:w="2"/><text x="88.6987%" y="287.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.12%)</title><rect x="88.5919%" y="277" width="0.1193%" height="15" fill="rgb(207,125,25)" fg:x="3712" fg:w="5"/><text x="88.8419%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.07%)</title><rect x="88.7112%" y="245" width="0.0716%" height="15" fill="rgb(210,195,18)" fg:x="3717" fg:w="3"/><text x="88.9612%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.07%)</title><rect x="88.7112%" y="229" width="0.0716%" height="15" fill="rgb(249,80,12)" fg:x="3717" fg:w="3"/><text x="88.9612%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="88.7351%" y="213" width="0.0477%" height="15" fill="rgb(221,65,9)" fg:x="3718" fg:w="2"/><text x="88.9851%" y="223.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.10%)</title><rect x="88.7112%" y="277" width="0.0955%" height="15" fill="rgb(235,49,36)" fg:x="3717" fg:w="4"/><text x="88.9612%" y="287.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (4 samples, 0.10%)</title><rect x="88.7112%" y="261" width="0.0955%" height="15" fill="rgb(225,32,20)" fg:x="3717" fg:w="4"/><text x="88.9612%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="88.7828%" y="245" width="0.0239%" height="15" fill="rgb(215,141,46)" fg:x="3720" fg:w="1"/><text x="89.0328%" y="255.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="88.8067%" y="277" width="0.0239%" height="15" fill="rgb(250,160,47)" fg:x="3721" fg:w="1"/><text x="89.0567%" y="287.50"></text></g><g><title>itrees`core::num::_&lt;impl core::str::traits::FromStr for u64&gt;::from_str (1 samples, 0.02%)</title><rect x="88.8305%" y="277" width="0.0239%" height="15" fill="rgb(216,222,40)" fg:x="3722" fg:w="1"/><text x="89.0805%" y="287.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="88.9021%" y="261" width="0.0477%" height="15" fill="rgb(234,217,39)" fg:x="3725" fg:w="2"/><text x="89.1521%" y="271.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.12%)</title><rect x="88.8544%" y="277" width="0.1193%" height="15" fill="rgb(207,178,40)" fg:x="3723" fg:w="5"/><text x="89.1044%" y="287.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="88.9499%" y="261" width="0.0239%" height="15" fill="rgb(221,136,13)" fg:x="3727" fg:w="1"/><text x="89.1999%" y="271.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.14%)</title><rect x="89.1408%" y="261" width="0.1432%" height="15" fill="rgb(249,199,10)" fg:x="3735" fg:w="6"/><text x="89.3908%" y="271.50"></text></g><g><title>itrees`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="89.2840%" y="261" width="0.0239%" height="15" fill="rgb(249,222,13)" fg:x="3741" fg:w="1"/><text x="89.5340%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.07%)</title><rect x="89.3079%" y="229" width="0.0716%" height="15" fill="rgb(244,185,38)" fg:x="3742" fg:w="3"/><text x="89.5579%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.05%)</title><rect x="89.3317%" y="213" width="0.0477%" height="15" fill="rgb(236,202,9)" fg:x="3743" fg:w="2"/><text x="89.5817%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="89.3556%" y="197" width="0.0239%" height="15" fill="rgb(250,229,37)" fg:x="3744" fg:w="1"/><text x="89.6056%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="89.3556%" y="181" width="0.0239%" height="15" fill="rgb(206,174,23)" fg:x="3744" fg:w="1"/><text x="89.6056%" y="191.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.10%)</title><rect x="89.3079%" y="261" width="0.0955%" height="15" fill="rgb(211,33,43)" fg:x="3742" fg:w="4"/><text x="89.5579%" y="271.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (4 samples, 0.10%)</title><rect x="89.3079%" y="245" width="0.0955%" height="15" fill="rgb(245,58,50)" fg:x="3742" fg:w="4"/><text x="89.5579%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="89.3795%" y="229" width="0.0239%" height="15" fill="rgb(244,68,36)" fg:x="3745" fg:w="1"/><text x="89.6295%" y="239.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="89.4033%" y="261" width="0.0477%" height="15" fill="rgb(232,229,15)" fg:x="3746" fg:w="2"/><text x="89.6533%" y="271.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (2 samples, 0.05%)</title><rect x="89.4511%" y="261" width="0.0477%" height="15" fill="rgb(254,30,23)" fg:x="3748" fg:w="2"/><text x="89.7011%" y="271.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="89.5227%" y="245" width="0.0477%" height="15" fill="rgb(235,160,14)" fg:x="3751" fg:w="2"/><text x="89.7727%" y="255.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.10%)</title><rect x="89.4988%" y="261" width="0.0955%" height="15" fill="rgb(212,155,44)" fg:x="3750" fg:w="4"/><text x="89.7488%" y="271.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="89.5704%" y="245" width="0.0239%" height="15" fill="rgb(226,2,50)" fg:x="3753" fg:w="1"/><text x="89.8204%" y="255.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="89.7613%" y="245" width="0.0716%" height="15" fill="rgb(234,177,6)" fg:x="3761" fg:w="3"/><text x="90.0113%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="89.8329%" y="181" width="0.0239%" height="15" fill="rgb(217,24,9)" fg:x="3764" fg:w="1"/><text x="90.0829%" y="191.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.05%)</title><rect x="89.8329%" y="245" width="0.0477%" height="15" fill="rgb(220,13,46)" fg:x="3764" fg:w="2"/><text x="90.0829%" y="255.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="89.8329%" y="229" width="0.0477%" height="15" fill="rgb(239,221,27)" fg:x="3764" fg:w="2"/><text x="90.0829%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.05%)</title><rect x="89.8329%" y="213" width="0.0477%" height="15" fill="rgb(222,198,25)" fg:x="3764" fg:w="2"/><text x="90.0829%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.05%)</title><rect x="89.8329%" y="197" width="0.0477%" height="15" fill="rgb(211,99,13)" fg:x="3764" fg:w="2"/><text x="90.0829%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="89.8568%" y="181" width="0.0239%" height="15" fill="rgb(232,111,31)" fg:x="3765" fg:w="1"/><text x="90.1068%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="89.8568%" y="165" width="0.0239%" height="15" fill="rgb(245,82,37)" fg:x="3765" fg:w="1"/><text x="90.1068%" y="175.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="89.8807%" y="245" width="0.0239%" height="15" fill="rgb(227,149,46)" fg:x="3766" fg:w="1"/><text x="90.1307%" y="255.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.07%)</title><rect x="89.9045%" y="245" width="0.0716%" height="15" fill="rgb(218,36,50)" fg:x="3767" fg:w="3"/><text x="90.1545%" y="255.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="89.9284%" y="229" width="0.0477%" height="15" fill="rgb(226,80,48)" fg:x="3768" fg:w="2"/><text x="90.1784%" y="239.50"></text></g><g><title>itrees`&lt;itrees::parse::Token as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="90.0716%" y="229" width="0.0239%" height="15" fill="rgb(238,224,15)" fg:x="3774" fg:w="1"/><text x="90.3216%" y="239.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="90.0955%" y="229" width="0.0477%" height="15" fill="rgb(241,136,10)" fg:x="3775" fg:w="2"/><text x="90.3455%" y="239.50"></text></g><g><title>itrees`__rdl_alloc (2 samples, 0.05%)</title><rect x="90.1432%" y="229" width="0.0477%" height="15" fill="rgb(208,32,45)" fg:x="3777" fg:w="2"/><text x="90.3932%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="90.1909%" y="165" width="0.0239%" height="15" fill="rgb(207,135,9)" fg:x="3779" fg:w="1"/><text x="90.4409%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.05%)</title><rect x="90.1909%" y="181" width="0.0477%" height="15" fill="rgb(206,86,44)" fg:x="3779" fg:w="2"/><text x="90.4409%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="90.2148%" y="165" width="0.0239%" height="15" fill="rgb(245,177,15)" fg:x="3780" fg:w="1"/><text x="90.4648%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.07%)</title><rect x="90.1909%" y="197" width="0.0716%" height="15" fill="rgb(206,64,50)" fg:x="3779" fg:w="3"/><text x="90.4409%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="90.2387%" y="181" width="0.0239%" height="15" fill="rgb(234,36,40)" fg:x="3781" fg:w="1"/><text x="90.4887%" y="191.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.12%)</title><rect x="90.1909%" y="229" width="0.1193%" height="15" fill="rgb(213,64,8)" fg:x="3779" fg:w="5"/><text x="90.4409%" y="239.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (5 samples, 0.12%)</title><rect x="90.1909%" y="213" width="0.1193%" height="15" fill="rgb(210,75,36)" fg:x="3779" fg:w="5"/><text x="90.4409%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.05%)</title><rect x="90.2625%" y="197" width="0.0477%" height="15" fill="rgb(229,88,21)" fg:x="3782" fg:w="2"/><text x="90.5125%" y="207.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.05%)</title><rect x="90.3103%" y="229" width="0.0477%" height="15" fill="rgb(252,204,47)" fg:x="3784" fg:w="2"/><text x="90.5603%" y="239.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="90.3103%" y="213" width="0.0477%" height="15" fill="rgb(208,77,27)" fg:x="3784" fg:w="2"/><text x="90.5603%" y="223.50"></text></g><g><title>itrees`&lt;itrees::parse::Token as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="90.5251%" y="213" width="0.0239%" height="15" fill="rgb(221,76,26)" fg:x="3793" fg:w="1"/><text x="90.7751%" y="223.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.19%)</title><rect x="90.5489%" y="213" width="0.1909%" height="15" fill="rgb(225,139,18)" fg:x="3794" fg:w="8"/><text x="90.7989%" y="223.50"></text></g><g><title>itrees`DYLD-STUB$$malloc (2 samples, 0.05%)</title><rect x="90.7399%" y="213" width="0.0477%" height="15" fill="rgb(230,137,11)" fg:x="3802" fg:w="2"/><text x="90.9899%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="90.8592%" y="149" width="0.0239%" height="15" fill="rgb(212,28,1)" fg:x="3807" fg:w="1"/><text x="91.1092%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="90.8831%" y="149" width="0.0477%" height="15" fill="rgb(248,164,17)" fg:x="3808" fg:w="2"/><text x="91.1331%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="90.9547%" y="133" width="0.0239%" height="15" fill="rgb(222,171,42)" fg:x="3811" fg:w="1"/><text x="91.2047%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.02%)</title><rect x="91.0024%" y="117" width="0.0239%" height="15" fill="rgb(243,84,45)" fg:x="3813" fg:w="1"/><text x="91.2524%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 0.12%)</title><rect x="90.9308%" y="149" width="0.1193%" height="15" fill="rgb(252,49,23)" fg:x="3810" fg:w="5"/><text x="91.1808%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="90.9785%" y="133" width="0.0716%" height="15" fill="rgb(215,19,7)" fg:x="3812" fg:w="3"/><text x="91.2285%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="91.0263%" y="117" width="0.0239%" height="15" fill="rgb(238,81,41)" fg:x="3814" fg:w="1"/><text x="91.2763%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="91.0263%" y="101" width="0.0239%" height="15" fill="rgb(210,199,37)" fg:x="3814" fg:w="1"/><text x="91.2763%" y="111.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.29%)</title><rect x="90.7876%" y="213" width="0.2864%" height="15" fill="rgb(244,192,49)" fg:x="3804" fg:w="12"/><text x="91.0376%" y="223.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (11 samples, 0.26%)</title><rect x="90.8115%" y="197" width="0.2625%" height="15" fill="rgb(226,211,11)" fg:x="3805" fg:w="11"/><text x="91.0615%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (11 samples, 0.26%)</title><rect x="90.8115%" y="181" width="0.2625%" height="15" fill="rgb(236,162,54)" fg:x="3805" fg:w="11"/><text x="91.0615%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (9 samples, 0.21%)</title><rect x="90.8592%" y="165" width="0.2148%" height="15" fill="rgb(220,229,9)" fg:x="3807" fg:w="9"/><text x="91.1092%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="91.0501%" y="149" width="0.0239%" height="15" fill="rgb(250,87,22)" fg:x="3815" fg:w="1"/><text x="91.3001%" y="159.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="91.0740%" y="213" width="0.0239%" height="15" fill="rgb(239,43,17)" fg:x="3816" fg:w="1"/><text x="91.3240%" y="223.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="91.0979%" y="197" width="0.0239%" height="15" fill="rgb(231,177,25)" fg:x="3817" fg:w="1"/><text x="91.3479%" y="207.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.07%)</title><rect x="91.0979%" y="213" width="0.0716%" height="15" fill="rgb(219,179,1)" fg:x="3817" fg:w="3"/><text x="91.3479%" y="223.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="91.1217%" y="197" width="0.0477%" height="15" fill="rgb(238,219,53)" fg:x="3818" fg:w="2"/><text x="91.3717%" y="207.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="91.2172%" y="197" width="0.0477%" height="15" fill="rgb(232,167,36)" fg:x="3822" fg:w="2"/><text x="91.4672%" y="207.50"></text></g><g><title>itrees`__rdl_realloc (2 samples, 0.05%)</title><rect x="91.2649%" y="181" width="0.0477%" height="15" fill="rgb(244,19,51)" fg:x="3824" fg:w="2"/><text x="91.5149%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="91.3842%" y="133" width="0.0239%" height="15" fill="rgb(224,6,22)" fg:x="3829" fg:w="1"/><text x="91.6342%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="91.4081%" y="133" width="0.0239%" height="15" fill="rgb(224,145,5)" fg:x="3830" fg:w="1"/><text x="91.6581%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="91.4320%" y="133" width="0.0477%" height="15" fill="rgb(234,130,49)" fg:x="3831" fg:w="2"/><text x="91.6820%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="91.4797%" y="133" width="0.0477%" height="15" fill="rgb(254,6,2)" fg:x="3833" fg:w="2"/><text x="91.7297%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.05%)</title><rect x="91.5274%" y="133" width="0.0477%" height="15" fill="rgb(208,96,46)" fg:x="3835" fg:w="2"/><text x="91.7774%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="91.5274%" y="117" width="0.0477%" height="15" fill="rgb(239,3,39)" fg:x="3835" fg:w="2"/><text x="91.7774%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (9 samples, 0.21%)</title><rect x="91.3842%" y="149" width="0.2148%" height="15" fill="rgb(233,210,1)" fg:x="3829" fg:w="9"/><text x="91.6342%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="91.5752%" y="133" width="0.0239%" height="15" fill="rgb(244,137,37)" fg:x="3837" fg:w="1"/><text x="91.8252%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (12 samples, 0.29%)</title><rect x="91.3365%" y="165" width="0.2864%" height="15" fill="rgb(240,136,2)" fg:x="3827" fg:w="12"/><text x="91.5865%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="91.5990%" y="149" width="0.0239%" height="15" fill="rgb(239,18,37)" fg:x="3838" fg:w="1"/><text x="91.8490%" y="159.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (14 samples, 0.33%)</title><rect x="91.3126%" y="181" width="0.3341%" height="15" fill="rgb(218,185,22)" fg:x="3826" fg:w="14"/><text x="91.5626%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="91.6229%" y="165" width="0.0239%" height="15" fill="rgb(225,218,4)" fg:x="3839" fg:w="1"/><text x="91.8729%" y="175.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.41%)</title><rect x="91.2649%" y="197" width="0.4057%" height="15" fill="rgb(230,182,32)" fg:x="3824" fg:w="17"/><text x="91.5149%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="91.6468%" y="181" width="0.0239%" height="15" fill="rgb(242,56,43)" fg:x="3840" fg:w="1"/><text x="91.8968%" y="191.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="91.6945%" y="181" width="0.0239%" height="15" fill="rgb(233,99,24)" fg:x="3842" fg:w="1"/><text x="91.9445%" y="191.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.07%)</title><rect x="91.6706%" y="197" width="0.0716%" height="15" fill="rgb(234,209,42)" fg:x="3841" fg:w="3"/><text x="91.9206%" y="207.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="91.7184%" y="181" width="0.0239%" height="15" fill="rgb(227,7,12)" fg:x="3843" fg:w="1"/><text x="91.9684%" y="191.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.14%)</title><rect x="91.9332%" y="181" width="0.1432%" height="15" fill="rgb(245,203,43)" fg:x="3852" fg:w="6"/><text x="92.1832%" y="191.50"></text></g><g><title>itrees`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="92.0764%" y="181" width="0.0239%" height="15" fill="rgb(238,205,33)" fg:x="3858" fg:w="1"/><text x="92.3264%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="92.1002%" y="117" width="0.0239%" height="15" fill="rgb(231,56,7)" fg:x="3859" fg:w="1"/><text x="92.3502%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="92.1241%" y="117" width="0.0239%" height="15" fill="rgb(244,186,29)" fg:x="3860" fg:w="1"/><text x="92.3741%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.07%)</title><rect x="92.1480%" y="117" width="0.0716%" height="15" fill="rgb(234,111,31)" fg:x="3861" fg:w="3"/><text x="92.3980%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.07%)</title><rect x="92.1480%" y="101" width="0.0716%" height="15" fill="rgb(241,149,10)" fg:x="3861" fg:w="3"/><text x="92.3980%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.17%)</title><rect x="92.1002%" y="149" width="0.1671%" height="15" fill="rgb(249,206,44)" fg:x="3859" fg:w="7"/><text x="92.3502%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 0.17%)</title><rect x="92.1002%" y="133" width="0.1671%" height="15" fill="rgb(251,153,30)" fg:x="3859" fg:w="7"/><text x="92.3502%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="92.2196%" y="117" width="0.0477%" height="15" fill="rgb(239,152,38)" fg:x="3864" fg:w="2"/><text x="92.4696%" y="127.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.19%)</title><rect x="92.1002%" y="181" width="0.1909%" height="15" fill="rgb(249,139,47)" fg:x="3859" fg:w="8"/><text x="92.3502%" y="191.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (8 samples, 0.19%)</title><rect x="92.1002%" y="165" width="0.1909%" height="15" fill="rgb(244,64,35)" fg:x="3859" fg:w="8"/><text x="92.3502%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="92.2673%" y="149" width="0.0239%" height="15" fill="rgb(216,46,15)" fg:x="3866" fg:w="1"/><text x="92.5173%" y="159.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="92.3150%" y="165" width="0.0239%" height="15" fill="rgb(250,74,19)" fg:x="3868" fg:w="1"/><text x="92.5650%" y="175.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.07%)</title><rect x="92.2912%" y="181" width="0.0716%" height="15" fill="rgb(249,42,33)" fg:x="3867" fg:w="3"/><text x="92.5412%" y="191.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="92.3389%" y="165" width="0.0239%" height="15" fill="rgb(242,149,17)" fg:x="3869" fg:w="1"/><text x="92.5889%" y="175.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.14%)</title><rect x="92.5060%" y="165" width="0.1432%" height="15" fill="rgb(244,29,21)" fg:x="3876" fg:w="6"/><text x="92.7560%" y="175.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.07%)</title><rect x="92.6492%" y="165" width="0.0716%" height="15" fill="rgb(220,130,37)" fg:x="3882" fg:w="3"/><text x="92.8992%" y="175.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (3 samples, 0.07%)</title><rect x="92.6492%" y="149" width="0.0716%" height="15" fill="rgb(211,67,2)" fg:x="3882" fg:w="3"/><text x="92.8992%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.07%)</title><rect x="92.6492%" y="133" width="0.0716%" height="15" fill="rgb(235,68,52)" fg:x="3882" fg:w="3"/><text x="92.8992%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.05%)</title><rect x="92.6730%" y="117" width="0.0477%" height="15" fill="rgb(246,142,3)" fg:x="3883" fg:w="2"/><text x="92.9230%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.05%)</title><rect x="92.6730%" y="101" width="0.0477%" height="15" fill="rgb(241,25,7)" fg:x="3883" fg:w="2"/><text x="92.9230%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="92.6730%" y="85" width="0.0477%" height="15" fill="rgb(242,119,39)" fg:x="3883" fg:w="2"/><text x="92.9230%" y="95.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="92.7208%" y="165" width="0.0239%" height="15" fill="rgb(241,98,45)" fg:x="3885" fg:w="1"/><text x="92.9708%" y="175.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="92.7446%" y="165" width="0.0239%" height="15" fill="rgb(254,28,30)" fg:x="3886" fg:w="1"/><text x="92.9946%" y="175.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.02%)</title><rect x="92.7685%" y="165" width="0.0239%" height="15" fill="rgb(241,142,54)" fg:x="3887" fg:w="1"/><text x="93.0185%" y="175.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="92.7685%" y="149" width="0.0239%" height="15" fill="rgb(222,85,15)" fg:x="3887" fg:w="1"/><text x="93.0185%" y="159.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.10%)</title><rect x="92.9594%" y="149" width="0.0955%" height="15" fill="rgb(210,85,47)" fg:x="3895" fg:w="4"/><text x="93.2094%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="93.0549%" y="85" width="0.0239%" height="15" fill="rgb(224,206,25)" fg:x="3899" fg:w="1"/><text x="93.3049%" y="95.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.05%)</title><rect x="93.0549%" y="149" width="0.0477%" height="15" fill="rgb(243,201,19)" fg:x="3899" fg:w="2"/><text x="93.3049%" y="159.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="93.0549%" y="133" width="0.0477%" height="15" fill="rgb(236,59,4)" fg:x="3899" fg:w="2"/><text x="93.3049%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.05%)</title><rect x="93.0549%" y="117" width="0.0477%" height="15" fill="rgb(254,179,45)" fg:x="3899" fg:w="2"/><text x="93.3049%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.05%)</title><rect x="93.0549%" y="101" width="0.0477%" height="15" fill="rgb(226,14,10)" fg:x="3899" fg:w="2"/><text x="93.3049%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="93.0788%" y="85" width="0.0239%" height="15" fill="rgb(244,27,41)" fg:x="3900" fg:w="1"/><text x="93.3288%" y="95.50"></text></g><g><title>itrees`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="93.1026%" y="149" width="0.0239%" height="15" fill="rgb(235,35,32)" fg:x="3901" fg:w="1"/><text x="93.3526%" y="159.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="93.1504%" y="133" width="0.0239%" height="15" fill="rgb(218,68,31)" fg:x="3903" fg:w="1"/><text x="93.4004%" y="143.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.07%)</title><rect x="93.1265%" y="149" width="0.0716%" height="15" fill="rgb(207,120,37)" fg:x="3902" fg:w="3"/><text x="93.3765%" y="159.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="93.1742%" y="133" width="0.0239%" height="15" fill="rgb(227,98,0)" fg:x="3904" fg:w="1"/><text x="93.4242%" y="143.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.12%)</title><rect x="93.4845%" y="133" width="0.1193%" height="15" fill="rgb(207,7,3)" fg:x="3917" fg:w="5"/><text x="93.7345%" y="143.50"></text></g><g><title>itrees`__rdl_alloc (2 samples, 0.05%)</title><rect x="93.6038%" y="133" width="0.0477%" height="15" fill="rgb(206,98,19)" fg:x="3922" fg:w="2"/><text x="93.8538%" y="143.50"></text></g><g><title>itrees`__rdl_realloc (1 samples, 0.02%)</title><rect x="93.6754%" y="117" width="0.0239%" height="15" fill="rgb(217,5,26)" fg:x="3925" fg:w="1"/><text x="93.9254%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="93.6993%" y="69" width="0.0477%" height="15" fill="rgb(235,190,38)" fg:x="3926" fg:w="2"/><text x="93.9493%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="93.7470%" y="69" width="0.0477%" height="15" fill="rgb(247,86,24)" fg:x="3928" fg:w="2"/><text x="93.9970%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.05%)</title><rect x="93.7947%" y="69" width="0.0477%" height="15" fill="rgb(205,101,16)" fg:x="3930" fg:w="2"/><text x="94.0447%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="93.7947%" y="53" width="0.0477%" height="15" fill="rgb(246,168,33)" fg:x="3930" fg:w="2"/><text x="94.0447%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.17%)</title><rect x="93.6993%" y="101" width="0.1671%" height="15" fill="rgb(231,114,1)" fg:x="3926" fg:w="7"/><text x="93.9493%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 0.17%)</title><rect x="93.6993%" y="85" width="0.1671%" height="15" fill="rgb(207,184,53)" fg:x="3926" fg:w="7"/><text x="93.9493%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="93.8425%" y="69" width="0.0239%" height="15" fill="rgb(224,95,51)" fg:x="3932" fg:w="1"/><text x="94.0925%" y="79.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.24%)</title><rect x="93.6516%" y="133" width="0.2387%" height="15" fill="rgb(212,188,45)" fg:x="3924" fg:w="10"/><text x="93.9016%" y="143.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (8 samples, 0.19%)</title><rect x="93.6993%" y="117" width="0.1909%" height="15" fill="rgb(223,154,38)" fg:x="3926" fg:w="8"/><text x="93.9493%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="93.8663%" y="101" width="0.0239%" height="15" fill="rgb(251,22,52)" fg:x="3933" fg:w="1"/><text x="94.1163%" y="111.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.12%)</title><rect x="93.8902%" y="133" width="0.1193%" height="15" fill="rgb(229,209,22)" fg:x="3934" fg:w="5"/><text x="94.1402%" y="143.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="93.9857%" y="117" width="0.0239%" height="15" fill="rgb(234,138,34)" fg:x="3938" fg:w="1"/><text x="94.2357%" y="127.50"></text></g><g><title>itrees`&lt;logos::lexer::Lexer&lt;Token&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="94.1050%" y="117" width="0.0477%" height="15" fill="rgb(212,95,11)" fg:x="3943" fg:w="2"/><text x="94.3550%" y="127.50"></text></g><g><title>itrees`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="94.1527%" y="101" width="0.0239%" height="15" fill="rgb(240,179,47)" fg:x="3945" fg:w="1"/><text x="94.4027%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.05%)</title><rect x="94.1766%" y="53" width="0.0477%" height="15" fill="rgb(240,163,11)" fg:x="3946" fg:w="2"/><text x="94.4266%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="94.1766%" y="37" width="0.0477%" height="15" fill="rgb(236,37,12)" fg:x="3946" fg:w="2"/><text x="94.4266%" y="47.50"></text></g><g><title>itrees`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.10%)</title><rect x="94.1527%" y="117" width="0.0955%" height="15" fill="rgb(232,164,16)" fg:x="3945" fg:w="4"/><text x="94.4027%" y="127.50"></text></g><g><title>itrees`alloc::raw_vec::finish_grow (3 samples, 0.07%)</title><rect x="94.1766%" y="101" width="0.0716%" height="15" fill="rgb(244,205,15)" fg:x="3946" fg:w="3"/><text x="94.4266%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.07%)</title><rect x="94.1766%" y="85" width="0.0716%" height="15" fill="rgb(223,117,47)" fg:x="3946" fg:w="3"/><text x="94.4266%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.07%)</title><rect x="94.1766%" y="69" width="0.0716%" height="15" fill="rgb(244,107,35)" fg:x="3946" fg:w="3"/><text x="94.4266%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="94.2243%" y="53" width="0.0239%" height="15" fill="rgb(205,140,8)" fg:x="3948" fg:w="1"/><text x="94.4743%" y="63.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.10%)</title><rect x="94.2721%" y="101" width="0.0955%" height="15" fill="rgb(228,84,46)" fg:x="3950" fg:w="4"/><text x="94.5221%" y="111.50"></text></g><g><title>itrees`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="94.3675%" y="101" width="0.0239%" height="15" fill="rgb(254,188,9)" fg:x="3954" fg:w="1"/><text x="94.6175%" y="111.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (3 samples, 0.07%)</title><rect x="94.3914%" y="101" width="0.0716%" height="15" fill="rgb(206,112,54)" fg:x="3955" fg:w="3"/><text x="94.6414%" y="111.50"></text></g><g><title>itrees`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="94.5107%" y="85" width="0.0477%" height="15" fill="rgb(216,84,49)" fg:x="3960" fg:w="2"/><text x="94.7607%" y="95.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (25 samples, 0.60%)</title><rect x="94.0095%" y="133" width="0.5967%" height="15" fill="rgb(214,194,35)" fg:x="3939" fg:w="25"/><text x="94.2595%" y="143.50"></text></g><g><title>itrees`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (15 samples, 0.36%)</title><rect x="94.2482%" y="117" width="0.3580%" height="15" fill="rgb(249,28,3)" fg:x="3949" fg:w="15"/><text x="94.4982%" y="127.50"></text></g><g><title>itrees`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.14%)</title><rect x="94.4630%" y="101" width="0.1432%" height="15" fill="rgb(222,56,52)" fg:x="3958" fg:w="6"/><text x="94.7130%" y="111.50"></text></g><g><title>itrees`core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="94.5585%" y="85" width="0.0477%" height="15" fill="rgb(245,217,50)" fg:x="3962" fg:w="2"/><text x="94.8085%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.05%)</title><rect x="94.6062%" y="133" width="0.0477%" height="15" fill="rgb(213,201,24)" fg:x="3964" fg:w="2"/><text x="94.8562%" y="143.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (65 samples, 1.55%)</title><rect x="93.1981%" y="149" width="1.5513%" height="15" fill="rgb(248,116,28)" fg:x="3905" fg:w="65"/><text x="93.4481%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.10%)</title><rect x="94.6539%" y="133" width="0.0955%" height="15" fill="rgb(219,72,43)" fg:x="3966" fg:w="4"/><text x="94.9039%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="94.7494%" y="149" width="0.0477%" height="15" fill="rgb(209,138,14)" fg:x="3970" fg:w="2"/><text x="94.9994%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.05%)</title><rect x="94.7971%" y="149" width="0.0477%" height="15" fill="rgb(222,18,33)" fg:x="3972" fg:w="2"/><text x="95.0471%" y="159.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (88 samples, 2.10%)</title><rect x="92.7924%" y="165" width="2.1002%" height="15" fill="rgb(213,199,7)" fg:x="3888" fg:w="88"/><text x="93.0424%" y="175.50">i..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="94.8449%" y="149" width="0.0477%" height="15" fill="rgb(250,110,10)" fg:x="3974" fg:w="2"/><text x="95.0949%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="94.8926%" y="165" width="0.0477%" height="15" fill="rgb(248,123,6)" fg:x="3976" fg:w="2"/><text x="95.1426%" y="175.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (110 samples, 2.63%)</title><rect x="92.3628%" y="181" width="2.6253%" height="15" fill="rgb(206,91,31)" fg:x="3870" fg:w="110"/><text x="92.6128%" y="191.50">it..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="94.9403%" y="165" width="0.0477%" height="15" fill="rgb(211,154,13)" fg:x="3978" fg:w="2"/><text x="95.1903%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="94.9881%" y="181" width="0.0477%" height="15" fill="rgb(225,148,7)" fg:x="3980" fg:w="2"/><text x="95.2381%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.10%)</title><rect x="95.0358%" y="181" width="0.0955%" height="15" fill="rgb(220,160,43)" fg:x="3982" fg:w="4"/><text x="95.2858%" y="191.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (143 samples, 3.41%)</title><rect x="91.7422%" y="197" width="3.4129%" height="15" fill="rgb(213,52,39)" fg:x="3844" fg:w="143"/><text x="91.9922%" y="207.50">itr..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="95.1313%" y="181" width="0.0239%" height="15" fill="rgb(243,137,7)" fg:x="3986" fg:w="1"/><text x="95.3813%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="95.1551%" y="197" width="0.0239%" height="15" fill="rgb(230,79,13)" fg:x="3987" fg:w="1"/><text x="95.4051%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.07%)</title><rect x="95.1790%" y="197" width="0.0716%" height="15" fill="rgb(247,105,23)" fg:x="3988" fg:w="3"/><text x="95.4290%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="95.2267%" y="181" width="0.0239%" height="15" fill="rgb(223,179,41)" fg:x="3990" fg:w="1"/><text x="95.4767%" y="191.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (173 samples, 4.13%)</title><rect x="91.1695%" y="213" width="4.1289%" height="15" fill="rgb(218,9,34)" fg:x="3820" fg:w="173"/><text x="91.4195%" y="223.50">itre..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="95.2506%" y="197" width="0.0477%" height="15" fill="rgb(222,106,8)" fg:x="3991" fg:w="2"/><text x="95.5006%" y="207.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (209 samples, 4.99%)</title><rect x="90.3580%" y="229" width="4.9881%" height="15" fill="rgb(211,220,0)" fg:x="3786" fg:w="209"/><text x="90.6080%" y="239.50">itrees..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="95.2983%" y="213" width="0.0477%" height="15" fill="rgb(229,52,16)" fg:x="3993" fg:w="2"/><text x="95.5483%" y="223.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (227 samples, 5.42%)</title><rect x="89.9761%" y="245" width="5.4177%" height="15" fill="rgb(212,155,18)" fg:x="3770" fg:w="227"/><text x="90.2261%" y="255.50">itrees`..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="95.3461%" y="229" width="0.0477%" height="15" fill="rgb(242,21,14)" fg:x="3995" fg:w="2"/><text x="95.5961%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="95.3938%" y="245" width="0.0239%" height="15" fill="rgb(222,19,48)" fg:x="3997" fg:w="1"/><text x="95.6438%" y="255.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (245 samples, 5.85%)</title><rect x="89.5943%" y="261" width="5.8473%" height="15" fill="rgb(232,45,27)" fg:x="3754" fg:w="245"/><text x="89.8443%" y="271.50">itrees`..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="95.4177%" y="245" width="0.0239%" height="15" fill="rgb(249,103,42)" fg:x="3998" fg:w="1"/><text x="95.6677%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="95.4415%" y="261" width="0.0716%" height="15" fill="rgb(246,81,33)" fg:x="3999" fg:w="3"/><text x="95.6915%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="95.5131%" y="261" width="0.0477%" height="15" fill="rgb(252,33,42)" fg:x="4002" fg:w="2"/><text x="95.7631%" y="271.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (277 samples, 6.61%)</title><rect x="88.9737%" y="277" width="6.6110%" height="15" fill="rgb(209,212,41)" fg:x="3728" fg:w="277"/><text x="89.2237%" y="287.50">itrees`it..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="95.5609%" y="261" width="0.0239%" height="15" fill="rgb(207,154,6)" fg:x="4004" fg:w="1"/><text x="95.8109%" y="271.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (298 samples, 7.11%)</title><rect x="88.4964%" y="293" width="7.1122%" height="15" fill="rgb(223,64,47)" fg:x="3708" fg:w="298"/><text x="88.7464%" y="303.50">itrees`itr..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="95.5847%" y="277" width="0.0239%" height="15" fill="rgb(211,161,38)" fg:x="4005" fg:w="1"/><text x="95.8347%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="95.6086%" y="293" width="0.0716%" height="15" fill="rgb(219,138,40)" fg:x="4006" fg:w="3"/><text x="95.8586%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="95.6802%" y="293" width="0.0239%" height="15" fill="rgb(241,228,46)" fg:x="4009" fg:w="1"/><text x="95.9302%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="95.6802%" y="277" width="0.0239%" height="15" fill="rgb(223,209,38)" fg:x="4009" fg:w="1"/><text x="95.9302%" y="287.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (323 samples, 7.71%)</title><rect x="88.0430%" y="309" width="7.7088%" height="15" fill="rgb(236,164,45)" fg:x="3689" fg:w="323"/><text x="88.2930%" y="319.50">itrees`itre..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="95.7041%" y="293" width="0.0477%" height="15" fill="rgb(231,15,5)" fg:x="4010" fg:w="2"/><text x="95.9541%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="95.7518%" y="309" width="0.0477%" height="15" fill="rgb(252,35,15)" fg:x="4012" fg:w="2"/><text x="96.0018%" y="319.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (356 samples, 8.50%)</title><rect x="87.3270%" y="325" width="8.4964%" height="15" fill="rgb(248,181,18)" fg:x="3659" fg:w="356"/><text x="87.5770%" y="335.50">itrees`itree..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="95.7995%" y="309" width="0.0239%" height="15" fill="rgb(233,39,42)" fg:x="4014" fg:w="1"/><text x="96.0495%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="95.8234%" y="325" width="0.0239%" height="15" fill="rgb(238,110,33)" fg:x="4015" fg:w="1"/><text x="96.0734%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="95.8473%" y="325" width="0.0239%" height="15" fill="rgb(233,195,10)" fg:x="4016" fg:w="1"/><text x="96.0973%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="95.8711%" y="325" width="0.0477%" height="15" fill="rgb(254,105,3)" fg:x="4017" fg:w="2"/><text x="96.1211%" y="335.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (382 samples, 9.12%)</title><rect x="86.8258%" y="341" width="9.1169%" height="15" fill="rgb(221,225,9)" fg:x="3638" fg:w="382"/><text x="87.0758%" y="351.50">itrees`itrees..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="95.9189%" y="325" width="0.0239%" height="15" fill="rgb(224,227,45)" fg:x="4019" fg:w="1"/><text x="96.1689%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="95.9427%" y="341" width="0.0239%" height="15" fill="rgb(229,198,43)" fg:x="4020" fg:w="1"/><text x="96.1927%" y="351.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (409 samples, 9.76%)</title><rect x="86.2291%" y="357" width="9.7613%" height="15" fill="rgb(206,209,35)" fg:x="3613" fg:w="409"/><text x="86.4791%" y="367.50">itrees`itrees:..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="95.9666%" y="341" width="0.0239%" height="15" fill="rgb(245,195,53)" fg:x="4021" fg:w="1"/><text x="96.2166%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="95.9905%" y="357" width="0.0239%" height="15" fill="rgb(240,92,26)" fg:x="4022" fg:w="1"/><text x="96.2405%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="96.0143%" y="357" width="0.0239%" height="15" fill="rgb(207,40,23)" fg:x="4023" fg:w="1"/><text x="96.2643%" y="367.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (441 samples, 10.53%)</title><rect x="85.5609%" y="373" width="10.5251%" height="15" fill="rgb(223,111,35)" fg:x="3585" fg:w="441"/><text x="85.8109%" y="383.50">itrees`itrees::..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.05%)</title><rect x="96.0382%" y="357" width="0.0477%" height="15" fill="rgb(229,147,28)" fg:x="4024" fg:w="2"/><text x="96.2882%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="96.0859%" y="373" width="0.0239%" height="15" fill="rgb(211,29,28)" fg:x="4026" fg:w="1"/><text x="96.3359%" y="383.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (459 samples, 10.95%)</title><rect x="85.2029%" y="389" width="10.9547%" height="15" fill="rgb(228,72,33)" fg:x="3570" fg:w="459"/><text x="85.4529%" y="399.50">itrees`itrees::p..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.05%)</title><rect x="96.1098%" y="373" width="0.0477%" height="15" fill="rgb(205,214,31)" fg:x="4027" fg:w="2"/><text x="96.3598%" y="383.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (489 samples, 11.67%)</title><rect x="84.5585%" y="405" width="11.6706%" height="15" fill="rgb(224,111,15)" fg:x="3543" fg:w="489"/><text x="84.8085%" y="415.50">itrees`itrees::pa..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="96.1575%" y="389" width="0.0716%" height="15" fill="rgb(253,21,26)" fg:x="4029" fg:w="3"/><text x="96.4075%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="96.2291%" y="405" width="0.0239%" height="15" fill="rgb(245,139,43)" fg:x="4032" fg:w="1"/><text x="96.4791%" y="415.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (511 samples, 12.20%)</title><rect x="84.0811%" y="421" width="12.1957%" height="15" fill="rgb(252,170,7)" fg:x="3523" fg:w="511"/><text x="84.3311%" y="431.50">itrees`itrees::par..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="96.2530%" y="405" width="0.0239%" height="15" fill="rgb(231,118,14)" fg:x="4033" fg:w="1"/><text x="96.5030%" y="415.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (537 samples, 12.82%)</title><rect x="83.5084%" y="437" width="12.8162%" height="15" fill="rgb(238,83,0)" fg:x="3499" fg:w="537"/><text x="83.7584%" y="447.50">itrees`itrees::pars..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="96.2768%" y="421" width="0.0477%" height="15" fill="rgb(221,39,39)" fg:x="4034" fg:w="2"/><text x="96.5268%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="96.3246%" y="437" width="0.0239%" height="15" fill="rgb(222,119,46)" fg:x="4036" fg:w="1"/><text x="96.5746%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="96.3484%" y="437" width="0.0239%" height="15" fill="rgb(222,165,49)" fg:x="4037" fg:w="1"/><text x="96.5984%" y="447.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (572 samples, 13.65%)</title><rect x="82.7924%" y="453" width="13.6516%" height="15" fill="rgb(219,113,52)" fg:x="3469" fg:w="572"/><text x="83.0424%" y="463.50">itrees`itrees::parse:..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="96.3723%" y="437" width="0.0716%" height="15" fill="rgb(214,7,15)" fg:x="4038" fg:w="3"/><text x="96.6223%" y="447.50"></text></g><g><title>itrees`itrees::parse::parse_tree_into (606 samples, 14.46%)</title><rect x="82.0048%" y="469" width="14.4630%" height="15" fill="rgb(235,32,4)" fg:x="3436" fg:w="606"/><text x="82.2548%" y="479.50">itrees`itrees::parse::..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="96.4439%" y="453" width="0.0239%" height="15" fill="rgb(238,90,54)" fg:x="4041" fg:w="1"/><text x="96.6939%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="96.4678%" y="469" width="0.0477%" height="15" fill="rgb(213,208,19)" fg:x="4042" fg:w="2"/><text x="96.7178%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="96.5155%" y="469" width="0.0239%" height="15" fill="rgb(233,156,4)" fg:x="4044" fg:w="1"/><text x="96.7655%" y="479.50"></text></g><g><title>itrees`itrees::parse::parse_program (622 samples, 14.84%)</title><rect x="81.7422%" y="485" width="14.8449%" height="15" fill="rgb(207,194,5)" fg:x="3425" fg:w="622"/><text x="81.9922%" y="495.50">itrees`itrees::parse::p..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="96.5394%" y="469" width="0.0477%" height="15" fill="rgb(206,111,30)" fg:x="4045" fg:w="2"/><text x="96.7894%" y="479.50"></text></g><g><title>itrees`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.02%)</title><rect x="96.5871%" y="485" width="0.0239%" height="15" fill="rgb(243,70,54)" fg:x="4047" fg:w="1"/><text x="96.8371%" y="495.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.02%)</title><rect x="96.5871%" y="469" width="0.0239%" height="15" fill="rgb(242,28,8)" fg:x="4047" fg:w="1"/><text x="96.8371%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.02%)</title><rect x="96.5871%" y="453" width="0.0239%" height="15" fill="rgb(219,106,18)" fg:x="4047" fg:w="1"/><text x="96.8371%" y="463.50"></text></g><g><title>itrees`std::time::Instant::elapsed (2 samples, 0.05%)</title><rect x="96.6110%" y="485" width="0.0477%" height="15" fill="rgb(244,222,10)" fg:x="4048" fg:w="2"/><text x="96.8610%" y="495.50"></text></g><g><title>itrees`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.05%)</title><rect x="96.6110%" y="469" width="0.0477%" height="15" fill="rgb(236,179,52)" fg:x="4048" fg:w="2"/><text x="96.8610%" y="479.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (2 samples, 0.05%)</title><rect x="96.6110%" y="453" width="0.0477%" height="15" fill="rgb(213,23,39)" fg:x="4048" fg:w="2"/><text x="96.8610%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (2 samples, 0.05%)</title><rect x="96.6110%" y="437" width="0.0477%" height="15" fill="rgb(238,48,10)" fg:x="4048" fg:w="2"/><text x="96.8610%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (31 samples, 0.74%)</title><rect x="96.6587%" y="485" width="0.7399%" height="15" fill="rgb(251,196,23)" fg:x="4050" fg:w="31"/><text x="96.9087%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.05%)</title><rect x="97.3986%" y="485" width="0.0477%" height="15" fill="rgb(250,152,24)" fg:x="4081" fg:w="2"/><text x="97.6486%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (85 samples, 2.03%)</title><rect x="97.4463%" y="485" width="2.0286%" height="15" fill="rgb(209,150,17)" fg:x="4083" fg:w="85"/><text x="97.6963%" y="495.50">l..</text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.17%)</title><rect x="99.4749%" y="485" width="0.1671%" height="15" fill="rgb(234,202,34)" fg:x="4168" fg:w="7"/><text x="99.7249%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.05%)</title><rect x="99.5943%" y="469" width="0.0477%" height="15" fill="rgb(253,148,53)" fg:x="4173" fg:w="2"/><text x="99.8443%" y="479.50"></text></g><g><title>itrees`itrees::main (4,176 samples, 99.67%)</title><rect x="0.0239%" y="501" width="99.6659%" height="15" fill="rgb(218,129,16)" fg:x="1" fg:w="4176"/><text x="0.2739%" y="511.50">itrees`itrees::main</text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="99.6420%" y="485" width="0.0477%" height="15" fill="rgb(216,85,19)" fg:x="4175" fg:w="2"/><text x="99.8920%" y="495.50"></text></g><g><title>itrees`main (4,179 samples, 99.74%)</title><rect x="0.0000%" y="565" width="99.7375%" height="15" fill="rgb(235,228,7)" fg:x="0" fg:w="4179"/><text x="0.2500%" y="575.50">itrees`main</text></g><g><title>itrees`std::rt::lang_start_internal (4,179 samples, 99.74%)</title><rect x="0.0000%" y="549" width="99.7375%" height="15" fill="rgb(245,175,0)" fg:x="0" fg:w="4179"/><text x="0.2500%" y="559.50">itrees`std::rt::lang_start_internal</text></g><g><title>itrees`std::rt::lang_start::_{{closure}} (4,179 samples, 99.74%)</title><rect x="0.0000%" y="533" width="99.7375%" height="15" fill="rgb(208,168,36)" fg:x="0" fg:w="4179"/><text x="0.2500%" y="543.50">itrees`std::rt::lang_start::_{{closure}}</text></g><g><title>itrees`std::sys_common::backtrace::__rust_begin_short_backtrace (4,179 samples, 99.74%)</title><rect x="0.0000%" y="517" width="99.7375%" height="15" fill="rgb(246,171,24)" fg:x="0" fg:w="4179"/><text x="0.2500%" y="527.50">itrees`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="99.6897%" y="501" width="0.0477%" height="15" fill="rgb(215,142,24)" fg:x="4177" fg:w="2"/><text x="99.9397%" y="511.50"></text></g><g><title>dyld`start (4,182 samples, 99.81%)</title><rect x="0.0000%" y="581" width="99.8091%" height="15" fill="rgb(250,187,7)" fg:x="0" fg:w="4182"/><text x="0.2500%" y="591.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (3 samples, 0.07%)</title><rect x="99.7375%" y="565" width="0.0716%" height="15" fill="rgb(228,66,33)" fg:x="4179" fg:w="3"/><text x="99.9875%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.07%)</title><rect x="99.7375%" y="549" width="0.0716%" height="15" fill="rgb(234,215,21)" fg:x="4179" fg:w="3"/><text x="99.9875%" y="559.50"></text></g><g><title>all (4,190 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(222,191,20)" fg:x="0" fg:w="4190"/><text x="0.2500%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__exit (8 samples, 0.19%)</title><rect x="99.8091%" y="581" width="0.1909%" height="15" fill="rgb(245,79,54)" fg:x="4182" fg:w="8"/><text x="100.0591%" y="591.50"></text></g></svg></svg>